{"version":3,"sources":["webpack://board-in-vanilla/./src/js/Figure.js","webpack://board-in-vanilla/./src/js/chess/chess-const.js","webpack://board-in-vanilla/./src/js/chess/chess-utils.js","webpack://board-in-vanilla/./src/js/chess/chess-squares.js","webpack://board-in-vanilla/./src/js/chess/chess-svg.js","webpack://board-in-vanilla/./src/js/chess/chess-controls.js","webpack://board-in-vanilla/./src/index.js","webpack://board-in-vanilla/./src/js/Chess.js"],"names":["Figure","config","this","letterW","iconW","letterB","iconB","color","rows","cols","fenBase","white","figures","b","r","n","k","q","p","getCellKey","colLetter","rowNumber","asSquare","letter","createCellsMap","listCells","forEach","row","col","cellKey","push","Map","parseFenStrToObject","fen","squaresKeyVal","allowedLetters","split","rowText","rowIdw","boardRowIdx","currentCol","character","includes","toUpperCase","figureLetter","toLowerCase","jumpCols","parseInt","c","squaresMap","squareColumLetter","squareRowNumber","limitation","currentColumnIdx","indexOf","squares","y","lastSquare","length","get","x","yx","cellY","xy","xInc","colIdx","rowIdx","asIcon","rowInt","squareLetter","squareName","content","squareEl","document","createElementNS","setAttribute","innerHTML","pieceLetter","squareNode","getElementById","className","classList","add","textContent","ChessControl","callBacks","buffer","square","panelControls","self","querySelectorAll","boardSquare","addEventListener","event","targetSquareName","target","srcElement","getAttribute","setSelectedSquare","button","onAdd","clearSelectedSquareFromBuffer","onClearSquare","onDomainW","onDomainB","onClear","onInit","onDomainsHide","item","contains","remove","asLines","withLimitation","colors","black","fenStr","fenToMap","render","then","chessControls","chessActions","squareControls","setFigureInSquare","drawPiecesFromMap","async","squaresInWhiteDomain","squareEntry","squaresFromFigure","getOptionfromCell","squaresInBlackDomain","_","drawBoard","fenAsObj","Object","entries","set","svg","appendChild","squareKey","figureText","entryFigure","asLetter","options","squareNameParts","squareColumnLetter","squareOptions","squareOptionsVertHorz","squareOptionsDiagonal"],"mappings":"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","file":"main.289222cb412d401ec936.js","sourcesContent":["export default class Figure {\r\n    constructor(config) {\r\n        this.letterW = config.letterW\r\n        this.iconW = config.iconW;\r\n        this.letterB = config.letterB;\r\n        this.iconB = config.iconB;\r\n    }\r\n\r\n    asLetter(color = true) {\r\n        if (color) {\r\n            return this.letterW;\r\n        }\r\n        return this.letterB;\r\n    }\r\n\r\n    asIcon(color = true) {\r\n        if (color) {\r\n            return this.iconW;\r\n        }\r\n        return this.iconB;\r\n    }\r\n}","import Figure from '../Figure.js'\r\n\r\nexport const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\nexport const fenBase = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport const flankQ = ['a', 'b', 'c', 'd', ];\r\nexport const flankK = ['e', 'f', 'g', 'h', ];\r\n\r\nexport const white = true;\r\nexport const black = false;\r\n\r\nexport const figures = {\r\n    b: new Figure({ letterW: 'B', iconW: '♗', letterB: 'b', iconB: '♝' }),\r\n    r: new Figure({ letterW: 'R', iconW: '♖', letterB: 'r', iconB: '♜' }),\r\n    n: new Figure({ letterW: 'N', iconW: '♘', letterB: 'n', iconB: '♞' }),\r\n    k: new Figure({ letterW: 'K', iconW: '♔', letterB: 'k', iconB: '♚' }),\r\n    q: new Figure({ letterW: 'Q', iconW: '♕', letterB: 'q', iconB: '♛' }),\r\n    p: new Figure({ letterW: 'P', iconW: '♙', letterB: 'p', iconB: '♟' }),\r\n};","import { cols, white, } from './chess-const.js'\r\n\r\n\r\nfunction getCellKey(colLetter, rowNumber) {\r\n    return `${colLetter}${rowNumber}`;\r\n}\r\n\r\nfunction createCellsMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, null]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\n\r\nfunction asSquare(letter, color = white) {\r\n    if (letter) {\r\n        return {\r\n            letter: letter,\r\n            color: color,\r\n        };\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nfunction parseFenStrToObject(fen) {\r\n\r\n    const squaresKeyVal = {};\r\n    const allowedLetters = ['r', 'n', 'b', 'k', 'q', 'p', 'R', 'N', 'B', 'K', 'Q', 'P'];\r\n    const fenFiguresSeparator = ' ';\r\n    const fenRowsSeparator = '/';\r\n\r\n    const figuresPart = fen.split(fenFiguresSeparator)[0];\r\n    const strRows = figuresPart.split(fenRowsSeparator);\r\n\r\n    strRows.forEach((rowText, rowIdw) => {\r\n        const boardRowIdx = 8 - rowIdw; // to flip the board ->  rowIdw + 1\r\n        let currentCol = 1;\r\n        rowText.split('').forEach((character) => {\r\n            if (allowedLetters.includes(character)) {\r\n                // it´s a figure letter\r\n                const colLetter = cols[currentCol - 1];\r\n                const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                const color = (character == character.toUpperCase()); // R -> true\r\n                const figureLetter = character.toLowerCase();\r\n                squaresKeyVal[cellKey] = asSquare(figureLetter, color);\r\n                currentCol += 1;\r\n\r\n            } else {\r\n                // should be a number\r\n                const jumpCols = parseInt(character, 10)\r\n                for (let c = currentCol; c < jumpCols + currentCol; c++) {\r\n                    const colLetter = cols[c - 1];\r\n                    const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                    squaresKeyVal[cellKey] = null;\r\n                }\r\n                currentCol += parseInt(character, 10);\r\n            }\r\n        })\r\n    });\r\n\r\n    return squaresKeyVal;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n    getCellKey,\r\n    createCellsMap,\r\n    parseFenStrToObject,\r\n    asSquare\r\n}","import { cols } from './chess-const.js';\r\nimport Utils from './chess-utils.js';\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithR(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    for (let y = squareRowNumber - 1; y >= 1; y--) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx + 1; x < cols.length; x++) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx - 1; x >= 0; x--) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithN(\r\n    squareColumLetter,\r\n    squareRowNumber\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const nCombisYX = [\r\n        [2, 1],\r\n        [1, 2],\r\n        [-1, 2],\r\n        [-2, 1],\r\n        [-2, -1],\r\n        [-1, -2],\r\n        [1, -2],\r\n        [2, -1],\r\n    ];\r\n    nCombisYX.forEach((yx) => {\r\n        const y = squareRowNumber + yx[0];\r\n        const x = currentColumnIdx + yx[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    })\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithP(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    color\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const cellY = color ? squareRowNumber + 1 : squareRowNumber - 1;\r\n    const pCombis = [\r\n        [1, cellY],\r\n        [-1, cellY]\r\n    ];\r\n    pCombis.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithB(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n\r\n    let xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithK(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const kCombisXY = [\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, -1],\r\n        [-1, -1],\r\n    ];\r\n    kCombisXY.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = squareRowNumber + xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\nexport default {\r\n    getSquaresOptionsFromSquareWithR,\r\n    getSquaresOptionsFromSquareWithN,\r\n    getSquaresOptionsFromSquareWithP,\r\n    getSquaresOptionsFromSquareWithB,\r\n    getSquaresOptionsFromSquareWithK\r\n}","import { cols, white, } from './chess-const.js'\r\nimport Utils from './chess-utils.js';\r\n\r\nconst boardSize = 100;\r\n\r\nfunction addMarkerCircle(squareName, type = null) {\r\n    let typeMarker = 'neutral'\r\n    if (type === white) {\r\n        typeMarker = 'white';\r\n    } else if (type === false) {\r\n        typeMarker = 'black';\r\n    }\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-circle-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerRect(squareName, type = true) {\r\n    let typeMarker = type ? 'ok' : 'error';\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-rect-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerMoveLast(squareName) {\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-move-last`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerNotation(squareName, text) {\r\n    const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n    const textNode = document.createTextNode(text);\r\n    textEl.setAttribute('x', '12%');\r\n    textEl.setAttribute('y', '0');\r\n    textEl.setAttribute('dy', '3');\r\n    textEl.setAttribute('data-square', `${squareName}`);\r\n    textEl.setAttribute('class', 'marker-square-notation');\r\n    textEl.setAttribute('text-anchor', 'end');\r\n    textEl.appendChild(textNode);\r\n\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    squareNode.appendChild(textEl);\r\n}\r\n\r\n\r\nfunction createSquare(colIdx, rowIdx, asIcon = true) {\r\n    const rowInt = 9 - (rowIdx + 1);\r\n\r\n    const squareLetter = cols[colIdx];\r\n    const squareName = Utils.getCellKey(squareLetter, rowInt);\r\n    const x = (boardSize / 8) * colIdx;\r\n    const y = (boardSize / 8) * rowIdx;\r\n\r\n    const xT = asIcon ? 2 : 4;\r\n    const yT = asIcon ? -1 : 8;\r\n    const dyT = asIcon ? 10 : 0;\r\n\r\n    const content = `\r\n        <title>${squareName}</title>\r\n        <rect id=\"base-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"base\" \r\n            width=\"12.5%\" \r\n            height=\"12.5%\"  />\r\n        <g id=\"markers-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"markers\" \r\n            width=\"12.5%\" \r\n            height=\"12.5%\"  \r\n            fill=\"transparent\"\r\n            />\r\n        <text id=\"piece-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"piece ${ asIcon ? 'asIcon' : ''}\" \r\n            text-anchor=\"start\" \r\n            x=\"${xT}\" \r\n            y=\"${yT}\" \r\n            dy=\"${dyT}\"\r\n         ></text>\r\n    `;\r\n\r\n    const squareEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    squareEl.setAttribute('class', 'square');\r\n    squareEl.setAttribute('id', `${squareName}`);\r\n    squareEl.setAttribute('data-square', `${squareName}`);\r\n    squareEl.setAttribute('data-square-col', `${squareLetter}`);\r\n    squareEl.setAttribute('data-square-row', `${rowInt}`);\r\n    squareEl.setAttribute('transform', `translate(${x},${y})`);\r\n\r\n    squareEl.innerHTML = content;\r\n    return squareEl\r\n}\r\n\r\nfunction setPieceInSquare(squareName, pieceLetter = '', color = true) {\r\n    const squareNode = document.getElementById(`piece-${squareName}`);\r\n    const className = color ? 'white' : 'black';\r\n    squareNode.classList.add(className);\r\n    squareNode.textContent = pieceLetter\r\n}\r\n\r\nexport default {\r\n    addMarkerCircle,\r\n    addMarkerRect,\r\n    addMarkerMoveLast,\r\n    addMarkerNotation,\r\n    createSquare,\r\n    setPieceInSquare\r\n}\r\n\r\n/*\r\nSvg.addMarkerCircle('e6', white);\r\nSvg.addMarkerRect('a1');\r\nSvg.addMarkerMoveLast('a2');\r\nSvg.addMarkerRect('e6', false);\r\nSvg.addMarkerNotation('f1', '??');\r\n*/","export default class ChessControl {\r\n\r\n    constructor(callBacks) {\r\n        this.buffer = {\r\n            square: null\r\n        };\r\n        this.callBacks = callBacks;\r\n        this.panelControls();\r\n\r\n    }\r\n\r\n    squareControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.square').forEach(boardSquare => {\r\n            boardSquare.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const targetSquareName = targetElement.getAttribute('data-square');\r\n                self.setSelectedSquare(targetSquareName);\r\n            }, false);\r\n        })\r\n    }\r\n\r\n    panelControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.button-add-fig').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const letter = targetElement.getAttribute('data-letter');\r\n                const color = letter === letter.toUpperCase();\r\n                self.callBacks.onAdd(self.buffer.square, letter.toLowerCase(), color)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n        const buttonClearSquare = document.getElementById(\"button-clear-square\");\r\n        buttonClearSquare.addEventListener('click', function() {\r\n            self.callBacks.onClearSquare(self.buffer.square);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonDomainW = document.getElementById(\"button-paint-domains-w\");\r\n        buttonDomainW.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n        }, false);\r\n\r\n        const buttonDomainB = document.getElementById(\"button-paint-domains-b\");\r\n        buttonDomainB.addEventListener('click', function() {\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n        const buttonDomainWB = document.getElementById(\"button-paint-domains-wb\");\r\n        buttonDomainWB.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n        const buttonClear = document.getElementById(\"button-clear\");\r\n        buttonClear.addEventListener('click', function() {\r\n            self.callBacks.onClear();\r\n        }, false);\r\n\r\n        const buttonInit = document.getElementById(\"button-init\");\r\n        buttonInit.addEventListener('click', function() {\r\n            self.callBacks.onInit();\r\n        }, false);\r\n\r\n        const buttonHideDomains = document.getElementById(\"button-hide-domains-wb\");\r\n        buttonHideDomains.addEventListener('click', function() {\r\n            self.callBacks.onDomainsHide();\r\n        }, false);\r\n    }\r\n\r\n    setSelectedSquare(squareName) {\r\n        this.buffer.square = squareName;\r\n\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n\r\n            } else {\r\n                item.classList.add('with-selection')\r\n            }\r\n        }\r\n    }\r\n\r\n    clearSelectedSquareFromBuffer() {\r\n        const squareName = this.buffer.square;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n\r\n            }\r\n            this.buffer.square = null;\r\n        }\r\n    }\r\n}","import Chess from './js/Chess.js'\r\nimport './index.scss';\r\n\r\nconst fens = [\r\n    '5k2/ppp5/4P3/3RBr1p/3Q2P1/1K2Nr2/PP3P2/8 b - - 1 32',\r\n    'rn2k1r1/ppp1pp1p/3p2p1/5bn1/P7/2N2B2/1PPPPP2/2BNK1RR  b - - 1 32',\r\n    'rnbqkbnr/pp3ppp/2ppp3/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\r\n    'Rr6/8/3B4/ppPpq2k/4P1K1/8/8/8 w KQkq - 0 1',\r\n    'r3kb1r/ppp1n1pp/2nB1p2/3p4/3P2b1/2P2N2/PP1NQPPP/R3KB1R xx'\r\n]\r\n\r\nconst configA = {\r\n    fen: fens[4],\r\n    asIcon: true,\r\n    asLines: true,\r\n    withLimitation: true\r\n}\r\n\r\n\r\nconst chess = new Chess(configA)","import { rows, cols, fenBase, flankQ, flankK, white, black, figures } from './chess/chess-const.js';\r\nimport Utils from './chess/chess-utils.js';\r\nimport Squares from './chess/chess-squares.js';\r\nimport Svg from './chess/chess-svg.js';\r\nimport ChessControls from './chess/chess-controls.js';\r\n\r\nexport default class Chess {\r\n\r\n    constructor(config) {\r\n        // Init\r\n        this.config = {\r\n            asIcon: ('asIcon' in config) ? config.asIcon : true,\r\n            asLines: ('asLines' in config) ? config.asLines : true,\r\n            withLimitation: ('withLimitation' in config) ? config.withLimitation : false,\r\n        }\r\n\r\n        this.figures = figures;\r\n        this.colors = {\r\n            white: white,\r\n            black: black,\r\n        };\r\n\r\n        // Run\r\n        this.squaresMap = Utils.createCellsMap(rows, cols);\r\n\r\n        const fenStr = ('fen' in config) ? config.fen : fenBase;\r\n        this.fenToMap(fenStr);\r\n        this.render().then(() => {\r\n\r\n            this.chessControls = new ChessControls(this.chessActions);\r\n            this.chessControls.squareControls();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    get chessActions() {\r\n        const self = this;\r\n        return {\r\n            onAdd: (square, letter, color) => {\r\n                self.setFigureInSquare(square, letter, color);\r\n                self.drawPiecesFromMap();\r\n            },\r\n            onClearSquare: (square) => {\r\n                self.setFigureInSquare(square, null);\r\n                self.drawPiecesFromMap();\r\n            },\r\n            onClear: () => {\r\n                self.squaresMap = Utils.createCellsMap(rows, cols);\r\n                self.drawPiecesFromMap();\r\n            },\r\n            onInit: () => {\r\n                self.fenToMap(fenBase);\r\n                self.drawPiecesFromMap();\r\n            },\r\n            onDomainW: async() => {\r\n\r\n                // White domain\r\n                const squaresInWhiteDomain = []\r\n                this.squaresMap.forEach((squareEntry, squareName) => {\r\n                    if (squareEntry && squareEntry.color === white) {\r\n                        const squaresFromFigure = this.getOptionfromCell(squareName);\r\n                        squaresInWhiteDomain.push(...squaresFromFigure);\r\n                    }\r\n                })\r\n                squaresInWhiteDomain.forEach(squareName => {\r\n                    document.getElementById(`base-${squareName}`).classList.add('with-domain-white');\r\n                })\r\n            },\r\n            onDomainB: async() => {\r\n\r\n                // Black domain\r\n                const squaresInBlackDomain = []\r\n                self.squaresMap.forEach((squareEntry, squareName) => {\r\n                    if (squareEntry && squareEntry.color === black) {\r\n                        const squaresFromFigure = this.getOptionfromCell(squareName);\r\n                        squaresInBlackDomain.push(...squaresFromFigure);\r\n                    }\r\n                })\r\n                squaresInBlackDomain.forEach(squareName => {\r\n                    document.getElementById(`base-${squareName}`).classList.add('with-domain-black');\r\n                })\r\n            },\r\n            onDomainsHide: async() => {\r\n                this.squaresMap.forEach((_, squareName) => {\r\n                    const classList = document.getElementById(`base-${squareName}`).classList;\r\n                    classList.remove('with-domain-white');\r\n                    classList.remove('with-domain-black');\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async render() {\r\n        await this.drawBoard();\r\n\r\n    }\r\n\r\n    fenToMap(fen) {\r\n        if (!fen || fen === '') {\r\n            return\r\n        }\r\n        const fenAsObj = Utils.parseFenStrToObject(fen);\r\n        this.squaresMap = new Map(Object.entries(fenAsObj));\r\n    }\r\n\r\n    setFigureInSquare(squareName, letter, color = white) {\r\n        this.squaresMap.set(squareName, Utils.asSquare(letter, color));\r\n    }\r\n\r\n    async drawBoard() {\r\n        const svg = document.getElementById(\"chess-svg\");\r\n        rows.forEach((_, rowIdx) => {\r\n            cols.forEach((_, colIdx) => {\r\n                const squareEl = Svg.createSquare(colIdx, rowIdx, this.config.asIcon);\r\n                svg.appendChild(squareEl);\r\n            })\r\n        })\r\n\r\n        this.drawPiecesFromMap()\r\n\r\n        // setTimeout(() => {\r\n        //     this.chessActions.onDomainB();\r\n        //     this.chessActions.onDomainW();\r\n\r\n        //     Svg.addMarkerRect('d6', true);\r\n        //     Svg.addMarkerNotation('d6', 'x');\r\n        //     Svg.addMarkerMoveLast('g3');\r\n        //     Svg.addMarkerMoveLast('d6');\r\n\r\n        //     Svg.addMarkerCircle('c7');\r\n        //     Svg.addMarkerNotation('c7', '10');\r\n        // }, 1000)\r\n    }\r\n\r\n    drawPiecesFromMap() {\r\n        this.squaresMap.forEach((squareEntry, squareKey) => {\r\n            if (squareEntry) {\r\n                let figureText = '';\r\n                const entryFigure = figures[squareEntry.letter];\r\n                if (this.config.asIcon === true) {\r\n                    figureText = entryFigure.asIcon(squareEntry.color);\r\n                } else {\r\n                    figureText = entryFigure.asLetter(squareEntry.color);\r\n                }\r\n                Svg.setPieceInSquare(squareKey, figureText, squareEntry.color)\r\n            } else {\r\n                Svg.setPieceInSquare(squareKey)\r\n            }\r\n        })\r\n    }\r\n\r\n    getOptionfromCell(squareName) {\r\n\r\n        const limitation = this.config.withLimitation;\r\n\r\n        const options = [];\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squareNameParts = squareName.split('');\r\n\r\n        const squareColumnLetter = squareNameParts[0];\r\n        const squareRowNumber = parseInt(squareNameParts[1], 10);\r\n\r\n        const { letter, color } = this.squaresMap.get(squareName);\r\n\r\n        if (letter === 'r') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'n') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithN(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'p') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithP(squareColumnLetter, squareRowNumber, color);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'b') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'q') {\r\n            const squareOptionsVertHorz = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            const squareOptionsDiagonal = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptionsVertHorz, ...squareOptionsDiagonal);\r\n        }\r\n        if (letter === 'k') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithK(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        return options;\r\n    }\r\n\r\n\r\n}"],"sourceRoot":""}